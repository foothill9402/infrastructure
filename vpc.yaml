---
AWSTemplateFormatVersion: "2010-09-09"
Description: Generic template for SDLC VPC. Contains conditions for shared,dev, qa, stage and prod based on AWS::AccountId. Requires transitGatewayId parameter.
Conditions:
  IsDefault: !Equals [1, 1]
  ISShared:
    !Equals [!Ref environment, shared]
  ISNotShared:
    !Not [Condition: ISShared]       
Parameters:
  product:
    Type: String
    Default: test-env
  environment:
    Type: String
    AllowedValues:
      - shared
      - dev
      - qa
      - stage
      - prod
  service:
    Type: String
    Default: vpc
Mappings:
  accounts:
    "557587840296":
      environment: shared
      cidr: 10.90.0.0/16
    "557587840296":
      environment: dev
      cidr: 10.91.0.0/16
    "557587840296":
      environment: qa
      cidr: 10.92.0.0/16  
    accountIds:
      accountIds:
        - "557587840296"
        - "557587840296"
        - "557587840296"
Resources:
  vpc:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !FindInMap
        - accounts
        - !Ref "AWS::AccountId"
        - cidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        -
          Key: Name
          Value: !Sub ${environment}-${product}-${service}
  publicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt vpc.CidrBlock, 256, 8 ]]
      VpcId: !Ref vpc
      AvailabilityZone: !Sub ${AWS::Region}a
      Tags:
        - Key: Name
          Value: !Sub ${environment}-${product}-${service}-publicsubneta
  publicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt vpc.CidrBlock, 256, 8 ]]
      VpcId: !Ref vpc
      AvailabilityZone: !Sub ${AWS::Region}b
      Tags:
        - Key: Name
          Value: !Sub ${environment}-${product}-${service}-publicsubnetb
  publicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt vpc.CidrBlock, 256, 8 ]]
      VpcId: !Ref vpc
      AvailabilityZone: !Sub ${AWS::Region}c
      Tags:
        - Key: Name
          Value: !Sub ${environment}-${product}-${service}-publicsubnetc
  publicSubnetD:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Select [ 4, !Cidr [ !GetAtt vpc.CidrBlock, 256, 8 ]]
      VpcId: !Ref vpc
      AvailabilityZone: !Sub ${AWS::Region}d
      Tags:
        - Key: Name
          Value: !Sub ${environment}-${product}-${service}-publicsubnetd                
  privateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Select [ 101, !Cidr [ !GetAtt vpc.CidrBlock, 256, 8 ]]
      VpcId: !Ref vpc
      AvailabilityZone: !Sub ${AWS::Region}a
      Tags:
        - Key: Name
          Value: !Sub ${environment}-${product}-${service}-privatesubneta
  privateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Select [ 102, !Cidr [ !GetAtt vpc.CidrBlock, 256, 8 ]]
      VpcId: !Ref vpc
      AvailabilityZone: !Sub ${AWS::Region}b
      Tags:
        - Key: Name
          Value: !Sub ${environment}-${product}-${service}-privatesubnetb
  privateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Select [ 103, !Cidr [ !GetAtt vpc.CidrBlock, 256, 8 ]]
      VpcId: !Ref vpc
      AvailabilityZone: !Sub ${AWS::Region}c
      Tags:
        - Key: Name
          Value: !Sub ${environment}-${product}-${service}-privatesubnetc
  privateSubnetD:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Select [ 104, !Cidr [ !GetAtt vpc.CidrBlock, 256, 8 ]]
      VpcId: !Ref vpc
      AvailabilityZone: !Sub ${AWS::Region}d
      Tags:
        - Key: Name
          Value: !Sub ${environment}-${product}-${service}-privatesubnetd            
  igw:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        -
          Key: Name
          Value: !Sub ${environment}-${product}-${service}-igw
  IGAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref vpc
      InternetGatewayId: !Ref igw
  NATEIPA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  ngwA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NATEIPA
          - AllocationId
      SubnetId: !Ref publicSubnetA
      Tags:
        -
          Key: Name
          Value: !Sub ${environment}-${product}-${service}-natgwa
  publicRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc
      Tags:
        -
          Key: Name
          Value: !Sub ${environment}-${product}-${service}-publicroutetablea
  privateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc
      Tags:
        -
          Key: Name
          Value: !Sub ${environment}-${product}-${service}-privateroutetablea
  publicRtAssocA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref publicSubnetA
      RouteTableId: !Ref publicRouteTableA
  publicRtAssocB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref publicSubnetB
      RouteTableId: !Ref publicRouteTableA
  publicRtAssocC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref publicSubnetC
      RouteTableId: !Ref publicRouteTableA
  publicRtAssocD:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref publicSubnetD
      RouteTableId: !Ref publicRouteTableA
  privateRtAssocA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref privateSubnetA
      RouteTableId: !Ref privateRouteTableA
  privateRtAssocB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref privateSubnetB
      RouteTableId: !Ref privateRouteTableA
  privateRtAssocC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref privateSubnetC
      RouteTableId: !Ref privateRouteTableA
  privateRtAssocD:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref privateSubnetD
      RouteTableId: !Ref privateRouteTableA
  internetRouteA:
    Type: AWS::EC2::Route
    DependsOn: IGAttach
    Properties:
      GatewayId: !Ref igw
      RouteTableId: !Ref publicRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
  NATROUTEA:
    Type: AWS::EC2::Route
    DependsOn: ngwA
    Properties:
      NatGatewayId: !Ref ngwA
      RouteTableId: !Ref privateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
  generalSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Shared and SG itself, and this VPC
      SecurityGroupIngress:
        -
          IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: !FindInMap
            - accounts
            - !Ref AWS::AccountId
            - cidr
        -
          IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: 10.91.0.0/16
        -
          IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: 10.92.0.0/16
        -
          IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: 10.93.0.0/16
        -
          IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: 10.94.0.0/16
        -
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: Allowed HTTP Traffic for All
        -
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: Allowed HTTPS Traffic for All
        -
          IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: 0.0.0.0/0
          Description: Allowed pritunl Traffic for All
      VpcId: !Ref vpc
      Tags:
        -
          Key: Name
          Value: !Sub ${environment}-${product}-${service}-generalSG
  generalSGSelf:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: generalSG
    Properties:
      GroupId: !Ref generalSG
      IpProtocol: -1
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref generalSG
Outputs:
  vpc:
    Description: Logical ID
    Value: !Ref vpc
    Export:
      Name: !Sub ${environment}-${product}-${service}
  publicSubnetA:
    Description: Logical ID of public SubnetA
    Value: !Ref publicSubnetA
    Export:
      Name: !Sub ${environment}-${product}-${service}-public-subnet-a
  publicSubnetB:
    Description: Logical ID of public SubnetB
    Value: !Ref publicSubnetB
    Export:
      Name: !Sub ${environment}-${product}-${service}-public-subnet-b
  publicSubnetC:
    Description: Logical ID
    Value: !Ref publicSubnetC
    Export:
      Name: !Sub ${environment}-${product}-${service}-public-subnet-c
  publicSubnetD:
    Description: Logical ID
    Value: !Ref publicSubnetD
    Export:
      Name: !Sub ${environment}-${product}-${service}-public-subnet-d
  privateSubnetA:
    Description: Logical ID
    Value: !Ref privateSubnetA
    Export:
      Name: !Sub ${environment}-${product}-${service}-private-subnet-a
  privateSubnetB:
    Description: Logical ID
    Value: !Ref privateSubnetB
    Export:
      Name: !Sub ${environment}-${product}-${service}-private-subnet-b
  privateSubnetC:
    Description: Logical ID
    Value: !Ref privateSubnetC
    Export:
      Name: !Sub ${environment}-${product}-${service}-private-subnet-c
  privateSubnetD:
    Description: Logical ID
    Value: !Ref privateSubnetD
    Export:
      Name: !Sub ${environment}-${product}-${service}-private-subnet-d
  NATEIPA:
    Description: The EIP of the nat gateway
    Value: !Ref NATEIPA
    Export:
      Name: !Sub ${environment}-${product}-${service}-nateip-a
  ngwA:
    Description: Logical ID
    Value: !Ref ngwA
    Export:
      Name: !Sub ${environment}-${product}-${service}-ngw-a
  publicRouteTableA:
    Description: Logical ID
    Value: !Ref publicRouteTableA
    Export:
      Name: !Sub ${environment}-${product}-${service}-public-route-table-a
  privateRouteTableA:
    Description: Private Route Table Logical ID
    Value: !Ref privateRouteTableA
    Export:
      Name: !Sub ${environment}-${product}-${service}-private-route-table-a
  generalSG:
    Description: General use SG Group ID
    Value:
      Fn::GetAtt:
        - generalSG
        - GroupId
    Export:
      Name: !Sub ${environment}-${product}-${service}-generalSG